{
	"info": {
		"_postman_id": "e1fa22f9-f332-401f-9463-91442f8c5e7a",
		"name": "Bookcart",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28771591"
	},
	"item": [
		{
			"name": "Register a new User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"firstName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"pm.collectionVariables.set(\"lastName\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
							"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));\r",
							"pm.collectionVariables.set(\"userName\", pm.variables.replaceIn('{{$randomUserName}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is OK 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"confirmPassword\":\t\"{{password}}\",\r\n    \"firstname\":\t\"{{firstName}}\",\r\n    \"gender\":\t\"{{gender}}\",\r\n    \"lastname\":\t\"{{lastName}}\",\r\n    \"password\":\t\"{{password}}\",\r\n    \"username\":\t\"{{userName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/api/user/",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is OK 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Expected user is logged in\", function () {\r",
							"     pm.expect(pm.response.json().userDetails.username).to.eql(pm.collectionVariables.replaceIn('{{userName}}'));\r",
							"});\r",
							"pm.collectionVariables.set(\"connectionToken\", pm.response.json().token);\r",
							"pm.collectionVariables.set(\"cartId\", pm.response.json().userDetails.userId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"{{password}}\",\r\n    \"username\": \"{{userName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/api/login",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get list of available books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    \r",
							"    responseData.forEach(function(book) {\r",
							"        pm.expect(book).to.have.property('bookId');\r",
							"        pm.expect(book).to.have.property('title');\r",
							"        pm.expect(book).to.have.property('author');\r",
							"        pm.expect(book).to.have.property('category');\r",
							"        pm.expect(book).to.have.property('price');\r",
							"        pm.expect(book).to.have.property('coverFileName');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Price is a non-negative number\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(book) {\r",
							"    pm.expect(book.price).to.be.a('number');\r",
							"    pm.expect(book.price).to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"pm.test(\"Cover file name should not be empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach((book) => {\r",
							"    pm.expect(book.coverFileName).to.exist.and.to.not.be.empty;\r",
							"  });\r",
							"});\r",
							"pm.collectionVariables.set(\"bookId\", pm.response.json()[0].bookId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/api/book/",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"book",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Open shopping cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('book').that.is.an('object').with.all.keys('bookId', 'title', 'author', 'category', 'price', 'coverFileName');\r",
							"        pm.expect(item).to.have.property('quantity').that.is.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Price is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.book.price).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Quantity is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(item => {\r",
							"        pm.expect(item.quantity).to.be.a('number').and.to.satisfy(val => val >= 0, \"Quantity must be a non-negative integer\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/api/shoppingcart/:cartId",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"shoppingcart",
						":cartId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add book to cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/api/shoppingcart/addToCart/:cartId/:bookId",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"shoppingcart",
						"addToCart",
						":cartId",
						":bookId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartId}}"
						},
						{
							"key": "bookId",
							"value": "{{bookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add book to Wishlist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Price is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.price).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"CoverFileName is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.coverFileName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/api/Wishlist/ToggleWishlist/:cartId/:bookId",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"Wishlist",
						"ToggleWishlist",
						":cartId",
						":bookId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartId}}"
						},
						{
							"key": "bookId",
							"value": "{{bookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an item from the cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{connectionToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/api/shoppingcart/:cartId/:bookId",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"shoppingcart",
						":cartId",
						":bookId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartId}}"
						},
						{
							"key": "bookId",
							"value": "{{bookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get list of items in the shopping cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an array and contains book and quantity properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('book');\r",
							"        pm.expect(item).to.have.property('quantity');\r",
							"    });\r",
							"});\r",
							"let sum = 0;\r",
							"pm.response.json().forEach(function(book) {\r",
							"sum += book.book.price*book.quantity;\r",
							"});\r",
							"pm.collectionVariables.set(\"cartTotal\", sum);\r",
							"pm.collectionVariables.set(\"cartContents\", JSON.stringify(pm.response.json()));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/api/shoppingcart/:cartId",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"shoppingcart",
						":cartId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Checkout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"cartTotal\": {{cartTotal}},\r\n    \"orderDetails\": \r\n            {{cartContents}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/api/CheckOut/:cartId",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"CheckOut",
						":cartId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get list of all orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('orderId');\r",
							"        pm.expect(item).to.have.property('orderDetails');\r",
							"        pm.expect(item).to.have.property('cartTotal');\r",
							"        pm.expect(item).to.have.property('orderDate');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"OrderId is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    responseData.forEach(function(order) {\r",
							"        pm.expect(order.orderId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"OrderId should be a non-empty string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"OrderDetails is an array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    responseData.forEach(function(order) {\r",
							"        pm.expect(order.orderDetails).to.be.an('array', \"OrderDetails should be an array\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Order details array is present and contains expected number of elements\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    pm.expect(responseData[0].orderDetails).to.exist;\r",
							"    pm.expect(responseData[0].orderDetails).to.be.an('array');\r",
							"    pm.expect(responseData[0].orderDetails).to.have.lengthOf.at.least(0);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/api/Order/:cartId",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api",
						"Order",
						":cartId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{connectionToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseURL",
			"value": "https://bookcart.azurewebsites.net",
			"type": "string"
		},
		{
			"key": "password",
			"value": "password",
			"type": "string"
		},
		{
			"key": "gender",
			"value": "Male",
			"type": "string"
		},
		{
			"key": "firstName",
			"value": ""
		},
		{
			"key": "lastName",
			"value": ""
		},
		{
			"key": "userName",
			"value": ""
		},
		{
			"key": "connectionToken",
			"value": ""
		},
		{
			"key": "cartId",
			"value": ""
		},
		{
			"key": "bookId",
			"value": ""
		},
		{
			"key": "cartContents",
			"value": ""
		},
		{
			"key": "cartTotal",
			"value": "",
			"type": "string"
		}
	]
}